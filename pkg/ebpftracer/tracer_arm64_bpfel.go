// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64

package ebpftracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type tracerConfig struct{ SummaryMapIndex int32 }

type tracerIpKey struct {
	ProcessIdentity tracerProcessIdentity
	Lport           uint16
	Dport           uint16
	Family          uint16
	Proto           uint32
	Saddr           [16]byte /* uint128 */
	Daddr           [16]byte /* uint128 */
}

type tracerProcessIdentity struct {
	Pid          uint32
	PidStartTime uint64
	Name         [16]uint8
}

type tracerTrafficSummary struct {
	RxPackets    uint64
	RxBytes      uint64
	TxPackets    uint64
	TxBytes      uint64
	LastPacketTs uint64
}

// loadTracer returns the embedded CollectionSpec for tracer.
func loadTracer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TracerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tracer: %w", err)
	}

	return spec, err
}

// loadTracerObjects loads tracer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tracerObjects
//	*tracerPrograms
//	*tracerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTracerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTracer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tracerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tracerSpecs struct {
	tracerProgramSpecs
	tracerMapSpecs
}

// tracerSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tracerProgramSpecs struct {
	CgroupSkbEgress  *ebpf.ProgramSpec `ebpf:"cgroup_skb_egress"`
	CgroupSkbIngress *ebpf.ProgramSpec `ebpf:"cgroup_skb_ingress"`
	CgroupSockCreate *ebpf.ProgramSpec `ebpf:"cgroup_sock_create"`
}

// tracerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tracerMapSpecs struct {
	ConfigMap                *ebpf.MapSpec `ebpf:"config_map"`
	SocketProcessIdentityMap *ebpf.MapSpec `ebpf:"socket_process_identity_map"`
	SumMapBuffer             *ebpf.MapSpec `ebpf:"sum_map_buffer"`
}

// tracerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type tracerObjects struct {
	tracerPrograms
	tracerMaps
}

func (o *tracerObjects) Close() error {
	return _TracerClose(
		&o.tracerPrograms,
		&o.tracerMaps,
	)
}

// tracerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type tracerMaps struct {
	ConfigMap                *ebpf.Map `ebpf:"config_map"`
	SocketProcessIdentityMap *ebpf.Map `ebpf:"socket_process_identity_map"`
	SumMapBuffer             *ebpf.Map `ebpf:"sum_map_buffer"`
}

func (m *tracerMaps) Close() error {
	return _TracerClose(
		m.ConfigMap,
		m.SocketProcessIdentityMap,
		m.SumMapBuffer,
	)
}

// tracerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type tracerPrograms struct {
	CgroupSkbEgress  *ebpf.Program `ebpf:"cgroup_skb_egress"`
	CgroupSkbIngress *ebpf.Program `ebpf:"cgroup_skb_ingress"`
	CgroupSockCreate *ebpf.Program `ebpf:"cgroup_sock_create"`
}

func (p *tracerPrograms) Close() error {
	return _TracerClose(
		p.CgroupSkbEgress,
		p.CgroupSkbIngress,
		p.CgroupSockCreate,
	)
}

func _TracerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tracer_arm64_bpfel.o
var _TracerBytes []byte
